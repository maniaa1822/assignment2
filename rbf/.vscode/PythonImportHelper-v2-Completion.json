[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "TDLambda_LVFA",
        "importPath": "student",
        "description": "student",
        "isExtraImport": true,
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "sklearn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn",
        "description": "sklearn",
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "sklearn.pipeline",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "FeatureUnion",
        "importPath": "sklearn.pipeline",
        "description": "sklearn.pipeline",
        "isExtraImport": true,
        "detail": "sklearn.pipeline",
        "documentation": {}
    },
    {
        "label": "sklearn.preprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "RBFSampler",
        "importPath": "sklearn.kernel_approximation",
        "description": "sklearn.kernel_approximation",
        "isExtraImport": true,
        "detail": "sklearn.kernel_approximation",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "evaluate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def evaluate(fname, env=None, n_episodes=10, max_steps_per_episode=200, render=False):\n    env = gym.make('MountainCar-v0')\n    if render:\n        env = gym.make('MountainCar-v0', render_mode='human')\n    agent = TDLambda_LVFA.load(fname)\n    rewards = []\n    for episode in range(n_episodes):\n        total_reward = 0\n        done = False\n        s, _ = env.reset()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "train",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def train(fname):\n    env = gym.make('MountainCar-v0')\n    agent = TDLambda_LVFA(env)\n    agent.train()\n    agent.save(fname)\ndef main():\n    parser = argparse.ArgumentParser(description='Run training and evaluation')\n    parser.add_argument('render', action='store_true')\n    parser.add_argument('-t', '--train', default=None)\n    parser.add_argument('-e', '--evaluate', default=None)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description='Run training and evaluation')\n    parser.add_argument('render', action='store_true')\n    parser.add_argument('-t', '--train', default=None)\n    parser.add_argument('-e', '--evaluate', default=None)\n    args = parser.parse_args()\n    if args.train is not None:\n        train(args.train)\n    if args.evaluate:\n        evaluate(args.evaluate, render=args.render)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "VanillaFeatureEncoder",
        "kind": 6,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "class VanillaFeatureEncoder:\n    def __init__(self, env):\n        self.env = env\n    def encode(self, state):\n        return state\n    @property\n    def size(self): \n        return self.env.observation_space.shape[0]\n# This code initializes the RBF encoder using the environment\n# passed into the constructor.",
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "RBFFeatureEncoder",
        "kind": 6,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "class RBFFeatureEncoder:\n    def __init__(self, env): # modify\n        self.env = env\n        self.encoder = RBFSampler(gamma = 1, n_components=100)\n        observation_examples = np.array([env.observation_space.sample() for x in range(100)])\n        self.scaler = sklearn.preprocessing.StandardScaler()\n        self.scaler.fit(observation_examples)\n        # Initialize RBF samplers with different parameters\n        self.rbf_space = [\n            (\"rbf1\", RBFSampler(gamma=5.0, n_components=100)),",
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "TDLambda_LVFA",
        "kind": 6,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "class TDLambda_LVFA:\n    def __init__(self, env, feature_encoder_cls=RBFFeatureEncoder, alpha=0.01, alpha_decay=1, \n                 gamma=0.9999, epsilon=0.3, epsilon_decay=0.995, final_epsilon=0.05, lambda_=0.9): # modify if you want (e.g. for forward view)\n        self.env = env\n        self.feature_encoder = feature_encoder_cls(env)\n        self.shape = (self.env.action_space.n, self.feature_encoder.size)\n        self.weights = np.random.random(self.shape)*0.01 #weights is a np array of size (n_actions, n_features) 3x100\n        self.traces = np.zeros(self.shape) #trace is a np array of size (n_actions, n_features) 3x100\n        self.alpha = alpha\n        self.alpha_decay = alpha_decay",
        "detail": "student",
        "documentation": {}
    }
]