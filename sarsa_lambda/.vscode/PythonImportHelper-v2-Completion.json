[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "gymnasium",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gymnasium",
        "description": "gymnasium",
        "detail": "gymnasium",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "sarsa_lambda",
        "importPath": "student",
        "description": "student",
        "isExtraImport": true,
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "evaluate",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def evaluate(num_episodes, render):\n    env_name = \"Taxi-v3\"\n    env = gym.make(env_name, render_mode=\"ansi\")\n    env_render = gym.make(env_name, render_mode=\"human\" if render else \"ansi\")\n    Q = sarsa_lambda(env)\n    rewards = []\n    for ep in range(num_episodes):\n        tot_reward = 0\n        done = False\n        s, _ = env_render.reset()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "epsilon_greedy_action",
        "kind": 2,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "def epsilon_greedy_action(env, Q, state, epsilon):\n    if np.random.random() < epsilon:\n        # choose a random action: exploration\n        action = env.action_space.sample()\n    else:\n        # choose the action with the highest Q value for the current state\n        # exploitation\n        action = np.argmax(Q[state, :])\n    return action\ndef sarsa_lambda(env, alpha=0.2, gamma=0.99, lambda_= 0.9, initial_epsilon=1.0, n_episodes=10000 ):",
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "sarsa_lambda",
        "kind": 2,
        "importPath": "student",
        "description": "student",
        "peekOfCode": "def sarsa_lambda(env, alpha=0.2, gamma=0.99, lambda_= 0.9, initial_epsilon=1.0, n_episodes=10000 ):\n    ####### Hyperparameters\n    # alpha = learning rate\n    # gamma = discount factor\n    # lambda_ = elegibility trace decay\n    # initial_epsilon = initial epsilon value\n    # n_episodes = number of episodes\n    ############# define Q table and initialize to zero\n    Q = np.zeros((env.observation_space.n, env.action_space.n))\n    E = np.zeros((env.observation_space.n, env.action_space.n))",
        "detail": "student",
        "documentation": {}
    }
]